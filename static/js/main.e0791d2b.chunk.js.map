{"version":3,"sources":["store/allActions.ts","store/actions/counter.ts","store/actions/action-types.ts","util/axios/axios.ts","components/navBar/navBar.tsx","app/mobile/index.tsx","router/router.tsx","App.tsx","serviceWorker.ts","store/reducers/index.ts","store/allReducers.ts","store/index.ts","index.tsx"],"names":["counter","add","type","fetch","params","a","console","log","method","axios","url","data","NavBarComponent","props","onChange","value","label","state","menu","forEach","dataItem","children","cItem","handleClick","e","preventDefault","setState","show","initData","setTimeout","onMaskClick","isLeaf","this","menuEl","className","level","height","document","documentElement","clientHeight","loadingEl","style","position","width","display","justifyContent","size","leftContent","mode","onLeftClick","icon","src","alt","onClick","React","Component","withRouter","connect","number","index","dispatch","bindActionCreators","allActions","Index","getLocation","key","checkPermissionPos","nextProps","prevState","navigator","geolocation","Toast","fail","Routes","basename","path","exact","component","to","App","addNum","Boolean","window","location","hostname","match","initState","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0791d2b.chunk.js","sourcesContent":["import counter from './actions/counter';\n\nexport default {\n  counter,\n}","\nimport * as types from './action-types';\n\n\nexport interface IAdd {\n  type: typeof types.ADD\n}\n\nexport interface ISubtract {\n  type: typeof types.Subtract\n}\n\n\nexport type Action = IAdd | ISubtract;\n\nexport default {\n  add():IAdd {\n    return { type: types.ADD}\n  }\n}","export const ADD = 'ADD';\nexport const Subtract = 'Subtract';","import axios from 'axios';\nimport { string } from 'prop-types';\n\nexport interface IParams {\n  method: Method;\n  url: string;\n  data?: object;\n}\n\nexport type Method = 'get' | 'post'\n\n\n  // | 'put'\n  // | 'patch'\n  // | 'delete'\n  // | 'head'\n\nconst fetch = async (params: IParams) => {\n  console.log('params', params)\n  let data;\n  if (params.method === 'get') {\n    data = await axios[params.method](params.url, {\n      params:{\n        ...params.data\n      }\n    })\n  } else {\n    data = await axios[params.method](params.url, {\n      ...params.data\n    })\n  }\n  return data.data;\n}\n\nexport default fetch","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router';\n\n\nimport './navBar.scss';\nimport allActions from '../../store/allActions';\nimport {INavBarState, INavBarprops} from './navBar.interface'\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile';\n\n\nclass NavBarComponent extends React.Component<INavBarprops, INavBarState> {\n  constructor(props: any) {\n    super(props);\n    this.state ={\n      menu: [\n        {\n          value: '1',\n          label: 'Food',\n        }, {\n          value: '2',\n          label: 'Supermarket',\n        },\n        {\n          value: '3',\n          label: 'Extra',\n          isLeaf: true,\n        },\n      ],\n      show: false,\n      initData: [],\n    }\n  }\n  public render() {\n    console.log('props', this.props);\n    const {menu, show, initData} = this.state;\n    const menuEl = (\n      <Menu\n        className=\"single-foo-menu\"\n        data={menu}\n        value={['1']}\n        level={1}\n        onChange={this.onChange}\n        height={document.documentElement.clientHeight * 0.6}\n      />\n    );\n    const loadingEl = (\n      <div style={{ position: 'absolute', width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\n        <ActivityIndicator size=\"large\" />\n      </div>\n    );\n    return(\n      <div className={show ? 'single-menu-active' : ''}>\n        <div>\n          <NavBar\n            leftContent=\"Menu\"\n            mode=\"light\"\n            onLeftClick={this.handleClick}\n            className=\"single-top-nav-bar\"\n            icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\n          >\n            OneLevel menu\n          </NavBar>\n        </div>\n        {show ? initData ? menuEl : loadingEl : null}\n        {show ? <div className=\"menu-mask\" onClick={this.onMaskClick} /> : null}\n      </div>\n    )\n  }\n\n  public onChange = (value: any) => {\n    let label = '';\n    this.state.menu.forEach((dataItem) => {\n      if (dataItem.value === value[0]) {\n        label = dataItem.label;\n        if (dataItem.children && value[1]) {\n          dataItem.children.forEach((cItem:any) => {\n            if (cItem.value === value[1]) {\n              label += ` ${cItem.label}`;\n            }\n          });\n        }\n      }\n    });\n    console.log(label);\n  }\n\n  public handleClick = (e:any) => {\n    e.preventDefault(); // Fix event propagation on Android\n    this.setState({\n      show: !this.state.show,\n    });\n    // mock for async data loading\n    if (!this.state.initData) {\n      setTimeout(() => {\n        this.setState({\n          initData: this.state.menu,\n        });\n      }, 500);\n    }\n  }\n\n  public onMaskClick = () => {\n    this.setState({\n      show: false,\n    });\n  }\n\n\n}\nconst mapStateToProps = (state:any) => {\n  return {\n    number: state.index.number\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  add: allActions.counter.add\n}, dispatch);\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NavBarComponent));\n\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router';\nimport axios from 'axios';\nimport fetch from '../../util/axios/axios'\n\nimport './index.scss';\nimport allActions from '../../store/allActions';\nimport NavBarComponent from '../../components/navBar/navBar';\nimport { Toast, Button } from 'antd-mobile';\n\n\nclass Index extends React.Component {\n\n  public static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    console.log('getDerivedStateFromProps')\n    console.log('nextProps', nextProps);\n    console.log('prevState', prevState);\n    const {type} = nextProps;\n    if (type !== prevState.type) {\n      return {\n          type,\n      };\n  }\n    return null;\n  }\n  constructor(props: any) {\n    super(props);\n    this.state ={\n    }\n    this.checkPermissionPos();\n\n  }\n\n  \n  public render() {\n    return(\n      <div className=\"mobile_index\">\n        <Button onClick={this.getLocation}>获取地理位置</Button>\n        <NavBarComponent />\n      </div>\n    )\n  }\n\n  public componentDidMount() { }\n\n  public getLocation = async () => {\n    const key = '778490c1c9526f65dd311fad82e18e03';\n    const ip = '192.168.16.66';\n    // axios.get(`https://restapi.amap.com/v3/ip?key=${key}&output=JSON`)\n    // .then((res) => {\n    //   console.log(res);\n    //   alert(res.data.city);\n    // })\n    // axios.get(`https://restapi.amap.com/v3/ip`, {\n    //   params: {\n    //     key\n    //   }\n    // })\n\n    const data = await fetch({\n      method: 'get',\n      url: 'https://restapi.amap.com/v3/ip',\n      data: {\n        key,\n      }\n    })\n\n    console.log(data)\n  }\n\n  // 检测是否支持地理定位\n  public checkPermissionPos() {\n    if (!navigator.geolocation) {\n      Toast.fail('该浏览器不支持获取地理位置', 1);\n    }\n  }\n}\nconst mapStateToProps = (state:any) => {\n  return {\n    number: state.index.number\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  add: allActions.counter.add\n}, dispatch);\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Index));\n\n","import { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport * as React from 'react'\nimport Index from '../app/mobile/index'\n\n\nconst Routes: React.FC = () => (\n  <Router basename={''}>\n    <Switch>\n      <Route path={'/'} exact={true} component={Index} />\n      <Redirect to={'/'} />\n    </Switch>\n  </Router>\n);\n\n\nexport default Routes;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from 'redux';\nimport './App.css';\nimport allActions from './store/allActions';\nimport Router from './router/router'\n\n\ninterface IProps{\n  number:number;\n  add: () => void;\n}\nclass App extends React.Component<IProps> {\n  public render() {\n    return(\n      <Router />\n    )\n  }\n\n  public  addNum  = () => {\n    this.props.add();\n  }\n}\nconst mapStateToProps = (state:any) => {\n  return {\n    number: state.index.number\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  add: allActions.counter.add\n}, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { IStore } from './index.interface';\nimport {Action} from '../actions/counter';\nimport * as types from '../actions/action-types';\n\nconst initState: IStore = {\n  number: 0,\n}\n\n\nexport default function(state: IStore = initState, action: Action) {\n  switch(action.type) {\n    case types.ADD:\n      return {\n        ...state,\n        number: state.number+1\n      };\n\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\n\nimport index from './reducers/index';\n\nconst reducers = combineReducers({\n  index\n});\nexport default reducers;","import { createStore, applyMiddleware} from 'redux';\nimport reducers from './allReducers';\nimport thunk from \"redux-thunk\";\n// 引入日志\nimport logger from \"redux-logger\";\n\nconst store = createStore(reducers, applyMiddleware(thunk, logger));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd-mobile/dist/antd-mobile.css';\n\nimport store from './store/index'\n\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}